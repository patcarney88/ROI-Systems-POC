name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [web, api, auth, documents, notifications, analytics]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build image for scanning
        run: |
          docker build -f apps/${{ matrix.image }}/Dockerfile \
            -t roi-poc-${{ matrix.image }}:scan \
            . || \
          docker build -f services/${{ matrix.image }}/Dockerfile \
            -t roi-poc-${{ matrix.image }}:scan \
            .
            
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'roi-poc-${{ matrix.image }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.image }}.sarif'
          category: 'container-${{ matrix.image }}'

  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'roi-systems-poc'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            
      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/
          
      - name: Check npm packages
        run: |
          npm audit --json > npm-audit.json || true
          if [ $(jq '.vulnerabilities.high + .vulnerabilities.critical' npm-audit.json) -gt 0 ]; then
            echo "High or Critical vulnerabilities found!"
            jq '.vulnerabilities' npm-audit.json
            exit 1
          fi
          
      - name: Check Python packages
        run: |
          pip install safety
          safety check --json > safety-report.json || true
          if [ $(jq '.vulnerabilities | length' safety-report.json) -gt 0 ]; then
            echo "Python vulnerabilities found!"
            jq '.vulnerabilities' safety-report.json
          fi

  # Code Security Analysis
  code-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          queries: security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/nodejs
            p/typescript
            p/react
            
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          
  # Infrastructure Security
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform,dockerfile,kubernetes
          output_format: sarif
          output_file_path: checkov.sarif
          
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov.sarif
          
      - name: Run Terrascan
        run: |
          docker run --rm -v $(pwd):/src tenable/terrascan scan \
            -i terraform -d infrastructure/terraform \
            -o json > terrascan-results.json
            
      - name: Check Terrascan results
        run: |
          if [ $(jq '.results.violations | length' terrascan-results.json) -gt 0 ]; then
            echo "Infrastructure security violations found!"
            jq '.results.violations' terrascan-results.json
            exit 1
          fi

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Install license checker
        run: npm install -g license-checker
        
      - name: Check licenses
        run: |
          license-checker --production --csv > licenses.csv
          license-checker --production --failOn 'GPL;AGPL;LGPL' || exit 1
          
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.csv

  # Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-scan, dependency-scan, code-analysis, secret-scan, infrastructure-scan, license-check]
    if: always()
    steps:
      - name: Generate report summary
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const passed = '${{ needs.container-scan.result }}' === 'success' &&
                          '${{ needs.dependency-scan.result }}' === 'success' &&
                          '${{ needs.code-analysis.result }}' === 'success' &&
                          '${{ needs.secret-scan.result }}' === 'success' &&
                          '${{ needs.infrastructure-scan.result }}' === 'success' &&
                          '${{ needs.license-check.result }}' === 'success';
            
            const status = passed ? '✅ All security checks passed' : '❌ Security checks failed';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${status}\n\nSee the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });