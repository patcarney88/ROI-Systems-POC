version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: roi-poc-postgres
    environment:
      POSTGRES_DB: roi_poc
      # SECURITY: No default passwords - environment variables required
      POSTGRES_USER: ${DB_USER:?ERROR - DB_USER environment variable required}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?ERROR - DB_PASSWORD environment variable required}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-roi_user} -d roi_poc"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - roi-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: roi-poc-redis
    # SECURITY: No default password - environment variable required
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?ERROR - REDIS_PASSWORD environment variable required}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - roi-network

  # Elasticsearch for document search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: roi-poc-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # SECURITY WARNING: In production, enable xpack security and set ELASTIC_PASSWORD
      - xpack.security.enabled=${ES_SECURITY_ENABLED:-false}
      - xpack.security.enrollment.enabled=${ES_SECURITY_ENABLED:-false}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - roi-network

  # LocalStack for AWS services
  localstack:
    image: localstack/localstack:latest
    container_name: roi-poc-localstack
    environment:
      - SERVICES=s3,ses,sqs,secretsmanager,kms
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infrastructure/docker/localstack/init.sh:/docker-entrypoint-initaws.d/init.sh
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    networks:
      - roi-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: roi-poc-nginx
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    networks:
      - roi-network

  # API Gateway Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: roi-poc-api
    environment:
      NODE_ENV: development
      PORT: 4000
      # SECURITY: No default credentials - environment variables required
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/roi_poc
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      AWS_ENDPOINT: http://localstack:4566
      JWT_SECRET: ${JWT_SECRET:?ERROR - JWT_SECRET environment variable required}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?ERROR - JWT_REFRESH_SECRET environment variable required}
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: npm run dev --workspace=apps/api
    networks:
      - roi-network

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: roi-poc-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
      NEXT_PUBLIC_WS_URL: ws://localhost:4000/graphql
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm run dev --workspace=apps/web
    networks:
      - roi-network

  # Authentication Service
  auth:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
      target: development
    container_name: roi-poc-auth
    environment:
      NODE_ENV: development
      PORT: 5001
      # SECURITY: No default credentials - environment variables required
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/roi_poc
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET:?ERROR - JWT_SECRET environment variable required}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?ERROR - JWT_REFRESH_SECRET environment variable required}
    volumes:
      - ./services/auth:/app/services/auth
      - ./packages:/app/packages
      - /app/node_modules
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev --workspace=services/auth
    networks:
      - roi-network

  # Document Service
  documents:
    build:
      context: .
      dockerfile: services/documents/Dockerfile
      target: development
    container_name: roi-poc-documents
    environment:
      NODE_ENV: development
      PORT: 5002
      # SECURITY: No default credentials - environment variables required
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/roi_poc
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      AWS_ENDPOINT: http://localstack:4566
      S3_BUCKET: roi-poc-documents
    volumes:
      - ./services/documents:/app/services/documents
      - ./packages:/app/packages
      - /app/node_modules
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      localstack:
        condition: service_started
    command: npm run dev --workspace=services/documents
    networks:
      - roi-network

  # ML API Service (Python)
  ml-api:
    build:
      context: .
      dockerfile: ml/Dockerfile
      target: development
    container_name: roi-poc-ml-api
    environment:
      ENVIRONMENT: development
      # SECURITY: No default credentials - environment variables required
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/roi_poc
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      AWS_ENDPOINT: http://localstack:4566
      MODEL_BUCKET: roi-poc-ml-models
    volumes:
      - ./ml:/app/ml
      - ml_models:/app/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    command: uvicorn ml.api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - roi-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: roi-poc-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - roi-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  localstack_data:
  ml_models:

networks:
  roi-network:
    driver: bridge