#!/bin/bash

###############################################################################
# ROI Systems POC - Deployment Script
# Generated by Superforge Trinity Build System
###############################################################################

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"

    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed"
        exit 1
    fi
    NODE_VERSION=$(node -v)
    print_success "Node.js: $NODE_VERSION"

    # Check npm
    if ! command -v npm &> /dev/null; then
        print_error "npm is not installed"
        exit 1
    fi
    NPM_VERSION=$(npm -v)
    print_success "npm: $NPM_VERSION"

    # Check git
    if ! command -v git &> /dev/null; then
        print_warning "git is not installed (optional)"
    else
        GIT_VERSION=$(git --version)
        print_success "git: $GIT_VERSION"
    fi
}

# Build frontend
build_frontend() {
    print_header "Building Frontend"

    cd frontend

    print_info "Installing dependencies..."
    npm install

    print_info "Building production bundle..."
    npm run build

    if [ -d "dist" ]; then
        DIST_SIZE=$(du -sh dist | cut -f1)
        print_success "Frontend build complete: $DIST_SIZE"
    else
        print_error "Frontend build failed - dist directory not found"
        exit 1
    fi

    cd ..
}

# Build backend
build_backend() {
    print_header "Building Backend"

    cd backend

    print_info "Installing dependencies..."
    npm install

    print_info "Compiling TypeScript..."
    npm run build

    if [ -d "dist" ]; then
        DIST_SIZE=$(du -sh dist | cut -f1)
        print_success "Backend build complete: $DIST_SIZE"
    else
        print_error "Backend build failed - dist directory not found"
        exit 1
    fi

    cd ..
}

# Environment setup
setup_environment() {
    print_header "Environment Configuration"

    # Check for .env file in backend
    if [ ! -f "backend/.env" ]; then
        print_warning ".env file not found in backend/"
        print_info "Creating .env from template..."

        cat > backend/.env << 'EOF'
# Server Configuration
NODE_ENV=production
PORT=3000
API_VERSION=v1

# CORS Configuration
CORS_ORIGIN=https://your-frontend-domain.com

# JWT Configuration
JWT_SECRET=CHANGE_THIS_TO_SECURE_SECRET_KEY_IN_PRODUCTION
JWT_REFRESH_SECRET=CHANGE_THIS_TO_SECURE_REFRESH_SECRET_KEY_IN_PRODUCTION
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=30d

# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/roi_systems_db

# File Upload Configuration
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# Logging
LOG_LEVEL=info

# Email Configuration (Optional)
SMTP_HOST=
SMTP_PORT=
SMTP_USER=
SMTP_PASSWORD=

# AWS Configuration (Optional)
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
S3_BUCKET=
EOF

        print_success "Created backend/.env template"
        print_warning "⚠️  IMPORTANT: Update JWT secrets and database URL before deploying!"
    else
        print_success "Environment file exists: backend/.env"
    fi
}

# Run tests
run_tests() {
    print_header "Running Tests"

    print_info "Running frontend tests..."
    cd frontend
    if npm run test --if-present 2>/dev/null; then
        print_success "Frontend tests passed"
    else
        print_warning "Frontend tests skipped (not configured)"
    fi
    cd ..

    print_info "Running backend tests..."
    cd backend
    if npm run test --if-present 2>/dev/null; then
        print_success "Backend tests passed"
    else
        print_warning "Backend tests skipped (not configured)"
    fi
    cd ..
}

# Deployment summary
deployment_summary() {
    print_header "Deployment Summary"

    echo -e "${GREEN}✓ Frontend Build${NC}"
    echo "  Location: frontend/dist/"
    echo "  Size: $(du -sh frontend/dist 2>/dev/null | cut -f1 || echo 'N/A')"
    echo ""

    echo -e "${GREEN}✓ Backend Build${NC}"
    echo "  Location: backend/dist/"
    echo "  Size: $(du -sh backend/dist 2>/dev/null | cut -f1 || echo 'N/A')"
    echo ""

    print_header "Next Steps"
    echo "1. Review and update environment variables in backend/.env"
    echo "2. Set up PostgreSQL database"
    echo "3. Deploy frontend to:"
    echo "   - Vercel: vercel --prod"
    echo "   - Netlify: netlify deploy --prod"
    echo "   - AWS S3: aws s3 sync frontend/dist/ s3://your-bucket/"
    echo ""
    echo "4. Deploy backend to:"
    echo "   - Heroku: git push heroku main"
    echo "   - AWS EC2: Copy dist/ and run with PM2"
    echo "   - Railway: railway up"
    echo ""
    echo "5. Configure DNS and SSL certificates"
    echo "6. Set up monitoring and logging"
    echo ""
    print_success "Deployment preparation complete!"
    echo ""
    print_info "For detailed instructions, see BUILD_REPORT.md"
}

# Main deployment flow
main() {
    print_header "ROI Systems POC - Production Build"
    echo "Starting deployment preparation..."
    echo ""

    check_prerequisites
    setup_environment
    build_frontend
    build_backend
    run_tests
    deployment_summary
}

# Parse command line arguments
SKIP_TESTS=false
SKIP_FRONTEND=false
SKIP_BACKEND=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --skip-frontend)
            SKIP_FRONTEND=true
            shift
            ;;
        --skip-backend)
            SKIP_BACKEND=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./deploy.sh [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --skip-tests      Skip running tests"
            echo "  --skip-frontend   Skip frontend build"
            echo "  --skip-backend    Skip backend build"
            echo "  --help, -h        Show this help message"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Override functions if skip flags are set
if [ "$SKIP_TESTS" = true ]; then
    run_tests() {
        print_warning "Skipping tests (--skip-tests flag)"
    }
fi

if [ "$SKIP_FRONTEND" = true ]; then
    build_frontend() {
        print_warning "Skipping frontend build (--skip-frontend flag)"
    }
fi

if [ "$SKIP_BACKEND" = true ]; then
    build_backend() {
        print_warning "Skipping backend build (--skip-backend flag)"
    }
fi

# Run main deployment
main
