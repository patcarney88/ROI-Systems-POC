/**
 * AI-Powered Business Alert System Database Schema
 * Tracks user behavior and predicts buying, selling, refinancing intent
 * Target: 10% annual alert generation rate with 70% accuracy
 */

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// EVENT TRACKING SYSTEM
// ============================================================================

model UserEvent {
  id              String              @id @default(uuid())

  // Event Identification
  eventType       EventType
  eventCategory   EventCategory
  eventName       String

  // User Context
  userId          String
  sessionId       String
  organizationId  String

  // Event Metadata
  properties      Json?               // Custom event properties
  metadata        Json?               // System metadata

  // Technical Details
  ipAddress       String?
  userAgent       String?
  deviceType      String?             // mobile, desktop, tablet
  platform        String?             // web, ios, android

  // Page Context
  pageUrl         String?
  referrer        String?

  // Timestamps
  timestamp       DateTime            @default(now())
  createdAt       DateTime            @default(now())

  // Relationships
  user            User                @relation(fields: [userId], references: [id])
  organization    Organization        @relation(fields: [organizationId], references: [id])

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([sessionId])
  @@index([organizationId, timestamp])
  @@map("user_events")
}

enum EventType {
  DOCUMENT_ACCESS
  DOCUMENT_DOWNLOAD
  DOCUMENT_SHARE
  PAGE_VIEW
  BUTTON_CLICK
  FORM_SUBMIT
  EMAIL_OPEN
  EMAIL_CLICK
  SEARCH
  CALCULATOR_USE
  PROPERTY_VIEW
  ALERT_INTERACTION
}

enum EventCategory {
  DOCUMENT_ACTIVITY
  EMAIL_ENGAGEMENT
  PLATFORM_BEHAVIOR
  FINANCIAL_TOOLS
  PROPERTY_RESEARCH
  ACCOUNT_MANAGEMENT
}

// ============================================================================
// SIGNAL PROCESSING
// ============================================================================

model AlertSignal {
  id                  String              @id @default(uuid())
  userId              String

  // Signal Type
  signalType          SignalType
  signalCategory      SignalCategory

  // Signal Strength
  strength            Float               // 0-1 scale
  confidence          Float               // 0-1 scale

  // Signal Details
  signalData          Json                // Detailed signal information
  contributingEvents  Json?               // Array of event IDs

  // Time Context
  detectedAt          DateTime            @default(now())
  windowStart         DateTime            // Start of analysis window
  windowEnd           DateTime            // End of analysis window

  // Processing Status
  processed           Boolean             @default(false)
  processedAt         DateTime?

  // Relationships
  user                User                @relation(fields: [userId], references: [id])
  alertScores         AlertScore[]

  @@index([userId, detectedAt])
  @@index([signalType, detectedAt])
  @@index([processed])
  @@map("alert_signals")
}

enum SignalType {
  // Document Patterns
  DOCUMENT_ACCESS_SPIKE
  DOCUMENT_DOWNLOAD_PATTERN
  DOCUMENT_SHARING_ACTIVITY
  DORMANT_REACTIVATION

  // Email Engagement
  HIGH_EMAIL_ENGAGEMENT
  REFINANCE_INTEREST
  MARKET_REPORT_VIEWS

  // Platform Behavior
  FREQUENT_VALUE_CHECKS
  CALCULATOR_USAGE
  COMPARABLE_RESEARCH
  PROFILE_UPDATES

  // External Signals
  CREDIT_INQUIRY
  LIFE_EVENT
  TAX_CHANGE
  INSURANCE_CLAIM
}

enum SignalCategory {
  DOCUMENT_ACTIVITY
  EMAIL_ENGAGEMENT
  PLATFORM_BEHAVIOR
  EXTERNAL_DATA
  LIFE_EVENTS
}

// ============================================================================
// ALERT SCORING & PREDICTION
// ============================================================================

model AlertScore {
  id                  String              @id @default(uuid())
  userId              String

  // Alert Classification
  alertType           AlertType
  confidence          Float               // 0-1 confidence score
  priority            AlertPriority       @default(MEDIUM)

  // Scoring Details
  features            Json                // Feature vector used
  modelVersion        String              // ML model version
  rawScore            Float               // Raw model output
  calibratedScore     Float               // Calibrated probability

  // Signal Sources
  signalIds           String[]            // Contributing signal IDs
  signalCount         Int                 @default(0)

  // Time Context
  scoredAt            DateTime            @default(now())
  validUntil          DateTime            // Score expiration

  // Alert Lifecycle
  status              AlertStatus         @default(PENDING)
  deliveredAt         DateTime?
  acknowledgedAt      DateTime?
  convertedAt         DateTime?

  // A/B Testing
  experimentId        String?
  variantId           String?

  // Relationships
  user                User                @relation(fields: [userId], references: [id])
  alertSignals        AlertSignal[]
  alertDelivery       AlertDelivery?
  alertOutcome        AlertOutcome?
  mlModel             MLModelVersion      @relation(fields: [modelVersion], references: [version])

  @@index([userId, scoredAt])
  @@index([alertType, confidence])
  @@index([status, scoredAt])
  @@index([experimentId])
  @@map("alert_scores")
}

enum AlertType {
  LIKELY_TO_SELL
  LIKELY_TO_BUY
  REFINANCE_OPPORTUNITY
  INVESTMENT_INTEREST
  DOWNSIZING_SIGNAL
  UPSIZING_SIGNAL
  RELOCATION_SIGNAL
}

enum AlertPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum AlertStatus {
  PENDING
  DELIVERED
  ACKNOWLEDGED
  CONVERTED
  DISMISSED
  EXPIRED
}

// ============================================================================
// ALERT DELIVERY SYSTEM
// ============================================================================

model AlertDelivery {
  id                  String              @id @default(uuid())
  alertScoreId        String              @unique
  userId              String

  // Delivery Details
  deliveryChannel     DeliveryChannel
  recipientEmail      String?
  recipientPhone      String?

  // Message Content
  subject             String
  message             String              @db.Text
  ctaText             String?
  ctaUrl              String?

  // Delivery Status
  status              DeliveryStatus      @default(PENDING)
  sentAt              DateTime?
  deliveredAt         DateTime?
  openedAt            DateTime?
  clickedAt           DateTime?

  // Delivery Metadata
  messageId           String?
  trackingId          String?

  // Engagement Metrics
  openCount           Int                 @default(0)
  clickCount          Int                 @default(0)

  // Relationships
  alertScore          AlertScore          @relation(fields: [alertScoreId], references: [id])
  user                User                @relation(fields: [userId], references: [id])

  @@index([userId, sentAt])
  @@index([status])
  @@map("alert_delivery")
}

enum DeliveryChannel {
  EMAIL
  SMS
  IN_APP
  CRM
  WEBHOOK
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

// ============================================================================
// ALERT OUTCOMES & LEARNING
// ============================================================================

model AlertOutcome {
  id                  String              @id @default(uuid())
  alertScoreId        String              @unique
  userId              String

  // Outcome Classification
  outcome             OutcomeType
  outcomeDate         DateTime

  // Conversion Details
  converted           Boolean             @default(false)
  conversionValue     Decimal?            @db.Decimal(12, 2)
  conversionType      String?             // sale, purchase, refinance

  // Time Metrics
  timeToConversion    Int?                // Days from alert to conversion

  // Feedback
  userFeedback        String?             @db.Text
  agentNotes          String?             @db.Text

  // Model Training
  usedForTraining     Boolean             @default(false)
  trainingSetDate     DateTime?

  // Timestamps
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relationships
  alertScore          AlertScore          @relation(fields: [alertScoreId], references: [id])
  user                User                @relation(fields: [userId], references: [id])

  @@index([userId, outcomeDate])
  @@index([outcome, outcomeDate])
  @@index([converted])
  @@map("alert_outcomes")
}

enum OutcomeType {
  TRUE_POSITIVE       // Alert was correct
  FALSE_POSITIVE      // Alert was incorrect
  TRUE_NEGATIVE       // Correctly didn't alert
  FALSE_NEGATIVE      // Missed opportunity
  PENDING             // Outcome not yet known
  EXPIRED             // Too old to determine
}

// ============================================================================
// MACHINE LEARNING MODELS
// ============================================================================

model MLModelVersion {
  id                  String              @id @default(uuid())

  // Model Identification
  version             String              @unique
  modelType           ModelType
  algorithm           String              // gradient_boosting, random_forest, neural_network

  // Model Metadata
  description         String              @db.Text
  features            Json                // Feature list and transformations
  hyperparameters     Json                // Model configuration

  // Training Details
  trainingDataSize    Int
  trainingStartDate   DateTime
  trainingEndDate     DateTime
  trainedAt           DateTime

  // Performance Metrics
  accuracy            Float
  precision           Float
  recall              Float
  f1Score             Float
  auc                 Float

  // Validation Metrics
  validationAccuracy  Float
  validationPrecision Float
  validationRecall    Float

  // Model Artifacts
  modelPath           String              // S3 or filesystem path
  artifactsPath       String?             // Additional artifacts

  // Deployment Status
  status              ModelStatus         @default(TRAINING)
  deployedAt          DateTime?
  retiredAt           DateTime?

  // Performance Tracking
  alertsGenerated     Int                 @default(0)
  truePositives       Int                 @default(0)
  falsePositives      Int                 @default(0)

  // Relationships
  alertScores         AlertScore[]

  @@index([version])
  @@index([status, deployedAt])
  @@map("ml_model_versions")
}

enum ModelType {
  SELL_PREDICTION
  BUY_PREDICTION
  REFINANCE_PREDICTION
  INVESTMENT_PREDICTION
  LIFESTYLE_CHANGE
}

enum ModelStatus {
  TRAINING
  VALIDATING
  DEPLOYED
  SHADOW_MODE       // Running but not generating alerts
  RETIRED
}

// ============================================================================
// FEATURE ENGINEERING
// ============================================================================

model UserFeatures {
  id                  String              @id @default(uuid())
  userId              String              @unique

  // Document Activity Features (30 days)
  docAccessCount      Int                 @default(0)
  docDownloadCount    Int                 @default(0)
  docShareCount       Int                 @default(0)
  lastDocAccessDays   Int?                // Days since last access
  docAccessFrequency  Float               @default(0) // Accesses per week

  // Email Engagement Features (90 days)
  emailOpenRate       Float               @default(0)
  emailClickRate      Float               @default(0)
  refinanceEmailClicks Int                @default(0)
  marketReportViews   Int                 @default(0)

  // Platform Behavior Features (30 days)
  valueCheckCount     Int                 @default(0)
  calculatorUseCount  Int                 @default(0)
  comparableViews     Int                 @default(0)
  sessionCount        Int                 @default(0)
  avgSessionDuration  Float               @default(0) // Minutes

  // Property Context Features
  propertyCount       Int                 @default(0)
  homeOwnershipYears  Float?
  estimatedEquity     Decimal?            @db.Decimal(12, 2)
  loanToValue         Float?

  // Engagement Patterns
  daysSinceLastVisit  Int?
  visitFrequency      Float               @default(0) // Visits per week
  peakActivityHour    Int?                // 0-23
  preferredDevice     String?

  // Life Event Indicators
  addressChangeRecent Boolean             @default(false)
  jobChangeIndicator  Boolean             @default(false)
  maritalStatusChange Boolean             @default(false)

  // Timestamps
  lastCalculated      DateTime            @default(now())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relationships
  user                User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([lastCalculated])
  @@map("user_features")
}

// ============================================================================
// A/B TESTING FRAMEWORK
// ============================================================================

model Experiment {
  id                  String              @id @default(uuid())

  // Experiment Details
  name                String
  description         String              @db.Text
  hypothesis          String              @db.Text

  // Configuration
  variants            Json                // Array of variant configurations
  trafficAllocation   Json                // Percentage allocation per variant
  targetMetric        String              // Primary success metric

  // Status
  status              ExperimentStatus    @default(DRAFT)
  startDate           DateTime?
  endDate             DateTime?

  // Sample Size
  targetSampleSize    Int
  currentSampleSize   Int                 @default(0)

  // Results
  results             Json?               // Statistical results
  winner              String?             // Winning variant ID

  // Timestamps
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relationships
  assignments         ExperimentAssignment[]

  @@map("experiments")
}

enum ExperimentStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

model ExperimentAssignment {
  id              String          @id @default(uuid())
  experimentId    String
  userId          String
  variantId       String

  // Timestamps
  assignedAt      DateTime        @default(now())

  // Relationships
  experiment      Experiment      @relation(fields: [experimentId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@unique([experimentId, userId])
  @@index([experimentId, variantId])
  @@map("experiment_assignments")
}

// ============================================================================
// SUPPORTING MODELS
// ============================================================================

model User {
  id                      String                  @id @default(uuid())
  email                   String                  @unique
  name                    String
  organizationId          String

  // Relationships
  organization            Organization            @relation(fields: [organizationId], references: [id])
  events                  UserEvent[]
  signals                 AlertSignal[]
  alertScores             AlertScore[]
  alertDeliveries         AlertDelivery[]
  alertOutcomes           AlertOutcome[]
  features                UserFeatures?
  experimentAssignments   ExperimentAssignment[]

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@map("users")
}

model Organization {
  id          String      @id @default(uuid())
  name        String
  users       User[]
  events      UserEvent[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("organizations")
}
