################################################################################
# ROI Systems POC - Kubernetes Secrets Template
#
# SECURITY WARNING:
# - This is a TEMPLATE file with placeholder values
# - NEVER commit actual secrets to version control
# - After substitution, the generated secrets.yaml file should be .gitignored
#
# USAGE:
#   1. Export environment variables with actual secret values
#   2. Substitute placeholders: envsubst < secrets.yaml.template > secrets.yaml
#   3. Apply to cluster: kubectl apply -f secrets.yaml
#   4. Delete secrets.yaml file immediately after application
#
# ALTERNATIVE (Recommended for production):
#   Use external-secrets-operator or sealed-secrets for GitOps-friendly approach
################################################################################

---
apiVersion: v1
kind: Namespace
metadata:
  name: ${ENVIRONMENT:-production}
  labels:
    name: ${ENVIRONMENT:-production}
    app: roi-systems-poc

---
################################################################################
# Application Secrets
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-app-secrets
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: application
    managed-by: secrets-management
type: Opaque
stringData:
  # JWT Authentication Secrets
  JWT_SECRET: "${JWT_SECRET}"
  JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
  JWT_EXPIRES_IN: "${JWT_EXPIRES_IN:-15m}"
  JWT_REFRESH_EXPIRES_IN: "${JWT_REFRESH_EXPIRES_IN:-30d}"

  # Session Management
  SESSION_SECRET: "${SESSION_SECRET}"

  # Encryption Keys
  ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
  ENCRYPTION_ALGORITHM: "aes-256-gcm"

  # API Keys
  INTERNAL_API_KEY: "${INTERNAL_API_KEY}"
  WEBHOOK_SECRET: "${WEBHOOK_SECRET}"

---
################################################################################
# Database Secrets
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-database-secrets
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: database
    managed-by: secrets-management
type: Opaque
stringData:
  DB_USER: "${DB_USER:-roi_user}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_NAME: "${DB_NAME:-roi_poc}"
  DB_HOST: "${DB_HOST:-postgres}"
  DB_PORT: "${DB_PORT:-5432}"
  DATABASE_URL: "postgresql://${DB_USER:-roi_user}:${DB_PASSWORD}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-roi_poc}?sslmode=${DB_SSL_MODE:-require}"

---
################################################################################
# Redis Secrets
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-redis-secrets
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: cache
    managed-by: secrets-management
type: Opaque
stringData:
  REDIS_PASSWORD: "${REDIS_PASSWORD}"
  REDIS_HOST: "${REDIS_HOST:-redis}"
  REDIS_PORT: "${REDIS_PORT:-6379}"
  REDIS_URL: "redis://default:${REDIS_PASSWORD}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}"

---
################################################################################
# AWS Secrets (Production)
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-aws-secrets
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: cloud
    managed-by: secrets-management
type: Opaque
stringData:
  AWS_REGION: "${AWS_REGION:-us-east-1}"
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  KMS_KEY_ID: "${KMS_KEY_ID:-}"
  S3_DOCUMENTS_BUCKET: "${S3_DOCUMENTS_BUCKET}"
  S3_ML_MODELS_BUCKET: "${S3_ML_MODELS_BUCKET}"

---
################################################################################
# External Services Secrets
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-external-secrets
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: external-services
    managed-by: secrets-management
type: Opaque
stringData:
  # AI/ML Services
  ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY:-}"

  # Email Services
  SMTP_HOST: "${SMTP_HOST:-}"
  SMTP_PORT: "${SMTP_PORT:-587}"
  SMTP_USER: "${SMTP_USER:-}"
  SMTP_PASS: "${SMTP_PASS:-}"
  EMAIL_FROM: "${EMAIL_FROM:-noreply@roi-systems.com}"

  # OAuth Providers (if enabled)
  GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID:-}"
  GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET:-}"
  MICROSOFT_CLIENT_ID: "${MICROSOFT_CLIENT_ID:-}"
  MICROSOFT_CLIENT_SECRET: "${MICROSOFT_CLIENT_SECRET:-}"

  # Payment Processing (if enabled)
  STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY:-}"
  STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET:-}"

  # Monitoring/Observability
  SENTRY_DSN: "${SENTRY_DSN:-}"
  DATADOG_API_KEY: "${DATADOG_API_KEY:-}"

---
################################################################################
# TLS Certificates (Optional - prefer cert-manager)
################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: roi-poc-tls-certs
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: networking
    managed-by: secrets-management
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # Generate: cat tls.crt | base64 -w 0
  tls.crt: ${TLS_CERT_BASE64:-}
  tls.key: ${TLS_KEY_BASE64:-}

---
################################################################################
# Secret Metadata (for rotation tracking)
################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: roi-poc-secrets-metadata
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
    component: metadata
data:
  SECRETS_VERSION: "1.0.0"
  SECRETS_GENERATED_AT: "${SECRETS_GENERATED_AT:-}"
  SECRETS_ROTATION_DUE: "${SECRETS_ROTATION_DUE:-}"
  LAST_ROTATED_BY: "${USER:-automation}"
  ROTATION_POLICY_URL: "https://github.com/roi-systems/docs/SECRET_ROTATION_POLICY.md"

---
################################################################################
# RBAC - Service Account for Application
################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: roi-poc-app
  namespace: ${ENVIRONMENT:-production}
  labels:
    app: roi-systems-poc
  annotations:
    # For AWS IRSA (IAM Roles for Service Accounts)
    eks.amazonaws.com/role-arn: "${AWS_IAM_ROLE_ARN:-}"

---
################################################################################
# RBAC - Role for Secret Access
################################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: roi-poc-secrets-reader
  namespace: ${ENVIRONMENT:-production}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames:
    - roi-poc-app-secrets
    - roi-poc-database-secrets
    - roi-poc-redis-secrets
    - roi-poc-aws-secrets
    - roi-poc-external-secrets
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames:
    - roi-poc-secrets-metadata
  verbs: ["get", "list"]

---
################################################################################
# RBAC - RoleBinding
################################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: roi-poc-secrets-reader-binding
  namespace: ${ENVIRONMENT:-production}
subjects:
- kind: ServiceAccount
  name: roi-poc-app
  namespace: ${ENVIRONMENT:-production}
roleRef:
  kind: Role
  name: roi-poc-secrets-reader
  apiGroup: rbac.authorization.k8s.io

---
################################################################################
# NetworkPolicy - Restrict secret access
################################################################################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: roi-poc-secrets-access
  namespace: ${ENVIRONMENT:-production}
spec:
  podSelector:
    matchLabels:
      app: roi-systems-poc
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ${ENVIRONMENT:-production}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ${ENVIRONMENT:-production}

################################################################################
# DEPLOYMENT INSTRUCTIONS:
#
# Method 1: Using environment variables (Development/Staging)
# ------------------------------------------------------------
# 1. Load secrets from .env file:
#    export $(grep -v '^#' .env.production | xargs)
#
# 2. Substitute placeholders:
#    envsubst < k8s/secrets.yaml.template > k8s/secrets.yaml
#
# 3. Apply to cluster:
#    kubectl apply -f k8s/secrets.yaml
#
# 4. Verify secrets created:
#    kubectl get secrets -n production
#
# 5. Clean up:
#    rm k8s/secrets.yaml
#
#
# Method 2: Using AWS Secrets Manager (Production - Recommended)
# ---------------------------------------------------------------
# 1. Install External Secrets Operator:
#    helm repo add external-secrets https://charts.external-secrets.io
#    helm install external-secrets external-secrets/external-secrets -n external-secrets-system --create-namespace
#
# 2. Create SecretStore (see k8s/external-secrets-store.yaml)
#
# 3. Create ExternalSecret (see k8s/external-secrets.yaml)
#
#
# Method 3: Using Sealed Secrets (GitOps)
# ----------------------------------------
# 1. Install Sealed Secrets:
#    kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/controller.yaml
#
# 2. Create sealed secret:
#    envsubst < k8s/secrets.yaml.template | kubeseal -f - -w k8s/sealed-secrets.yaml
#
# 3. Commit to Git:
#    git add k8s/sealed-secrets.yaml
#
# 4. Apply via GitOps:
#    kubectl apply -f k8s/sealed-secrets.yaml
#
#
# SECURITY NOTES:
# ---------------
# - NEVER commit k8s/secrets.yaml (contains actual secrets)
# - ALWAYS use encryption at rest for Kubernetes secrets (enable in cluster config)
# - ROTATE secrets every 90 days using: ./scripts/rotate-secrets.sh production all
# - AUDIT secret access: kubectl get events -n production | grep Secret
# - MONITOR secret rotation status: kubectl get configmap roi-poc-secrets-metadata -n production -o yaml
################################################################################
